###name=Jdbc template and datasource part 1
###full = JdbcTemplate.zip
=Create an xml-based spring application
==Create a Java project from scratch using your favorite IDE
+<<MainEmpty
==Add ##maven## support to it
==Create a ##beans.xml## file and a context based on it
+<<beans.xml
+<<spring-context
+Main.java
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
=Add a dependency to HyperSQL DataBase
+pom.xml
<dependency>
    <groupId>org.hsqldb</groupId>
    <artifactId>hsqldb</artifactId>
    <version>2.4.0</version>
</dependency>
=Create ##application.properties## with four parameters necessary for connection with HSQLDB (in-memory)
+application.properties
#src\main\resources\application.properties
db.driverClass = org.hsqldb.jdbc.JDBCDriver
db.url = jdbc:hsqldb:mem:test
db.username = user
db.password = user
=Add a placeholder configurer as a @@<bean>@@ and inject ##application.properties## into it
+beans.xml
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="application.properties"/>
</bean>
=Create a simple datasource with the properties injected into it
+<<spring-jdbc
+beans.xml
<bean class="org.springframework.jdbc.datasource.SimpleDriverDataSource" id="dataSource">
    <property name="driverClass" value="${db.driverClass}" />
    <property name="url" value="${db.url}" />
    <property name="username" value="${db.username}" />
    <property name="password" value="${db.password}" />
</bean>
=Retrieve the datasource from the context (as a variable)
+Main.java
DataSource dataSource = context.getBean(DataSource.class);
=Create a @@JdbcTemplate@@ based on the data source
+Main.java
JdbcTemplate template = new JdbcTemplate(dataSource);
=Create table ##Customer## with fields ##id## (int) and ##name## (String)
+Main.java
template.execute("CREATE TABLE Customer(id INTEGER, name VARCHAR(100))");
=Use a callback for acquiring a @@Connection@@ from @@JdbcTemplate@@
+Main.java
template.execute((ConnectionCallback<Object>) con -> {

    return null;
});
=Retrieve the url and the username from the connection and print them
+Main.java
template.execute((ConnectionCallback<Object>) con -> {
    System.out.println(con.getMetaData().getURL());
    System.out.println(con.getMetaData().getUserName());
    //Not necessary to handle SQLException and close the connection
    return null;
});
=Run the application and ensure that the url and the username are exactly the same as specified in ##application.properties##
+Output
jdbc:hsqldb:mem:test
user
=Insert a new row into the ##Customer## table (without any callbacks)
+Main.java
template.update("INSERT INTO Customer VALUES (1, 'Laura')");
=Insert a new row into the ##Customer## table (with a statement callback) and save the result to a variable
+Main.java
Boolean ok = template.execute((StatementCallback<Boolean>) stmt -> {
    stmt.execute("INSERT INTO Customer VALUES (2, 'Jack')");
    //Statement is from "java.sql" package
    return Boolean.TRUE;
});
=Print the variable to the console
+Main.java
System.out.println("ok = " + ok);
=Insert a new row using prepared statement creator + prepared statement callback
+Main.java
template.execute((PreparedStatementCreator)con -> con.prepareStatement("INSERT INTO Customer VALUES (?,?)"),
        (PreparedStatementCallback<Object>) ps -> {
    ps.setInt(1, 3);
    ps.setString(2, "Alex");
    ps.execute();
    return null;
});
=Insert a new row using a special version of @@JdbcTemplate@@ that supports parameters like ":name"
+Main.java
NamedParameterJdbcTemplate namedTemplate = new NamedParameterJdbcTemplate(template);
Map<String, Object> params = new HashMap<>();
params.put("id", 4);
params.put("name", "Nikola");
namedTemplate.update("INSERT INTO Customer VALUES (:id,:name)", params);
=Print the names of the customers using row callback handler
+Main.java
template.query("SELECT * FROM Customer", (RowCallbackHandler) rs -> {
    System.out.println(rs.getString("name"));
});
=Retrieve and print the number of the rows
+Main.java
Integer count = template.queryForObject("SELECT COUNT (*) FROM Customer", Integer.class);
System.out.println("count - " + count);
=Retrieve the first customer to a variable (as a map) and print his name
+Main.java
Map<String, Object> customerMap = template.queryForMap("SELECT * FROM Customer WHERE id = 1");
System.out.println(customerMap.get("name"));
=Run the application and check the output